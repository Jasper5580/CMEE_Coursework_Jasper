======================================================================
AUTOMATED FEEDBACK LOG
======================================================================

HOW TO READ THIS FEEDBACK:
--------------------------
1. This log contains detailed feedback on your code execution
2. Each script is tested and results are shown with output and errors
3. IMPORTANT: Read all the way to the END for a summary and debugging guidance
4. The summary at the end will help you understand and fix any issues
5. Scripts are run in a headless environment (no GUI applications)

======================================================================

Starting testing for Yian Liu

Processing week 1

Your current Git repo size is about 1.40 MiB on disk

Found directories: .git, week1, Feedback
Found files: .gitignore, README.md

Processing week 1: week1

Found 6 code files to test.

Note: Expected file checking not performed (no FileList provided).
Expected file checking will only be performed during final assessment.

======================================================================
Script: csvtospace.sh

Contents:

**********
#/bin/bash
# Author: Yian.Liu25@imperial.ac.uk
# Script: tabtocsv.sh
# Date: Oct 2025

# Check if the user gave an input file name
if [ $# -lt 1 ]; then
  echo "bash csvtospace.sh"
  exit 1
fi

# Save the first argument (the file name) in a variable
infile="$1"

# Check if the file exists
if [ ! -f "$infile" ]; then
  echo "Error: file not found: $infile"
  exit 1
fi

outfile="${infile}_space.txt"

# Use 'tr' to replace commas with spaces
echo "Changing commas to spaces in $infile ..."
tr ',' ' ' < "$infile" > "$outfile"

echo "Done! Created file: $outfile"
**********

Output (first 500 chars):

**********
bash csvtospace.sh

**********
No errors.
======================================================================
Script: tiff2png.sh

Contents:

**********
#!/bin/bash
for f in *.tif;
do
  echo "Converting $f"
  convert "$f" "$(basename "$f" .tif).png"
done

**********

Output (first 500 chars):

**********
Converting image1.tif
Converting image2.tif

**********
No errors.
======================================================================
Script: Countlines.sh

Contents:

**********
#!/bin/bash
NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo

**********

Output (first 500 chars):

**********
The file  has  lines


**********
Errors:
**********
Countlines.sh: line 2: $1: ambiguous redirect

**********
======================================================================
Script: boilerplate.sh

Contents:

**********
#!/bin/sh
# Author: Yian.Liu Yian.Liu25@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2025

echo -e "\nThis is a shell script! \n"

**********

Output (first 500 chars):

**********

This is a shell script! 


**********
No errors.
======================================================================
Script: ConcatenateTwoFiles.sh

Contents:

**********
#!/bin/bash
cat $1 > $3
cat $2 >> $3
echo "Merged File is:"
cat $3

**********

Output (first 500 chars):

**********
Merged File is:

**********
Errors:
**********
ConcatenateTwoFiles.sh: line 2: $3: ambiguous redirect
ConcatenateTwoFiles.sh: line 3: $3: ambiguous redirect

**********
======================================================================
Script: tabtocsv.sh

Contents:

**********
#!/bin/sh
# Author: Yian.Liu25@imperial.ac.uk
# Script: tabtocsv.sh
# Date: Oct 2025
# Check if the user gave an input file name
if [ $# -lt 1 ]; then
  echo "bash tabtocsv.sh"
  exit 1
fi

# Save the first argument (the file name) in a variable
infile="$1"

# Check if the file really exists
if [ ! -f "$infile" ]; then
  echo "Error: file not found: $infile"
  exit 1
fi

# Use 'tr' to replace TABs with commas and save to a new file
echo "Changing TABs to commas in $infile ..."
tr '\t' ',' < "$infile" > "$infile.csv"

echo "Done! Created file: $infile.csv"

**********

Output (first 500 chars):

**********
bash tabtocsv.sh

**********
No errors.

======================================================================
FEEDBACK SUMMARY
======================================================================

Scripts tested: 9
Scripts successful: 7
Scripts with errors: 2
Warnings/Notes: 1

IMPORTANT DEBUGGING GUIDANCE:
------------------------------

Please review all warnings and errors, and your directory structure based on the above log.

Ask yourself: Why did I not get these warnings or errors on my machine when I tested my code?
Common reasons for environment differences:

• File paths: Your local machine may have different directory structures
• Dependencies: Missing packages or different versions
• File permissions: Scripts may not be executable on the testing server
• Case sensitivity: Linux systems are case-sensitive (your laptop may not be)
• Working directory: Scripts may assume they run from a specific location
• Input files: Required data files may be missing or in wrong locations

Debugging steps:
1. Test your code in a clean environment (fresh directory)
2. Check all file paths are relative and correct
3. Verify all required files are present and properly named
4. Test on a case-sensitive system if possible
5. Run your scripts from different directories to check robustness

Fix these issues and test again. Good debugging skills are essential for scientific computing!

